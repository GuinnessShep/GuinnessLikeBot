import requests
import ssl
import random
import hashlib
import time
import os
import json
import re
import threading
from concurrent.futures import ThreadPoolExecutor
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from urllib.parse import urlencode
from rich import print
from rich.progress import Progress

# Disable warnings
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# Domains, Devices, and Versions
DOMAINS = ["api22-core-c-useast1a.tiktokv.com", "api19-core-c-useast1a.tiktokv.com",
           "api16-core-c-useast1a.tiktokv.com", "api21-core-c-useast1a.tiktokv.com"]
DEVICES = ["SM-G9900", "SM-A136U1", ...]  # truncated for brevity
VERSIONS = ["190303", "190205", ...]     # truncated for brevity

# Gorgon Class ...
# I'll keep it as it is because the cryptographic logic seems custom and should not be altered lightly.

def send(device_id, install_id, cdid, openudid):
    global reqs, success, fails, rps, rpm

    # Rest of the logic ...
    # Same logic, just organized and cleaned up.

def rpsm_loop():
    global rps, rpm
    while True:
        initial = reqs
        time.sleep(1.5)
        rps = round((reqs - initial) / 1.5, 1)
        rpm = round(rps * 60, 1)

def fetch_proxies():
    url_list = [
        # ...urls
    ]
    for url in url_list:
        response = requests.get(url)
        if response.ok:
            with open("proxies.txt", "a+") as f:
                f.write(response.text)

if __name__ == "__main__":
    with open('devices.txt', 'r') as f:
        devices = f.read().splitlines()

    with open('config.json', 'r') as f:
        config = json.load(f)

    if config["proxy"]['proxyscrape']:
        fetch_proxies()

    proxy_format = f'{config["proxy"]["proxy-type"].lower()}://{config["proxy"]["credential"]+"@" if config["proxy"]["auth"] else ""}' if config['proxy']['use-proxy'] else ''

    if config['proxy']['use-proxy']:
        with open('proxies.txt', 'r') as f:
            proxies = f.read().splitlines()

    os.system("cls" if os.name == "nt" else "clear")

    print("[bold blue]TikTok Viewbot by @guinnessgshep[/bold blue]\n")

    # Input part, using Rich to show colorful prompts.
    video = input('Enter Video URL -> ')
    num_threads = int(input('Threads -> '))

    # ...Rest of the logic...

    reqs, success, fails, rps, rpm = 0, 0, 0, 0, 0

    threading.Thread(target=rpsm_loop).start()

    def worker(device):
        did, iid, cdid, openudid = device.split(':')
        send(did, iid, cdid, openudid)

    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        with Progress() as progress:
            task = progress.add_task("[cyan]Sending...", total=len(devices))
            for _ in executor.map(worker, devices):
                progress.update(task, advance=1)
